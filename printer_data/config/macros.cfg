[gcode_macro DEPLOY_DEPRESSOR]
gcode:
  SET_SERVO SERVO=gantry_servo ANGLE=80

[gcode_macro STOW_DEPRESSOR]
gcode:
  SET_SERVO SERVO=gantry_servo ANGLE=180

[gcode_macro SCRUB_NOZZLE]
# heat nozzle for best results
variable_x1: 96 # left of brush   <<<edit this value>>>
variable_x2: 136 # right or brush  <<<edit this value>>>
variable_y1: 250 # y value         <<<edit this value>>>
variable_z1: 5 # nozzle height   <<<edit this value>>>
gcode:
    M400  ;wait for buffer to clear
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28         ;home axes before travel moves
    {% endif %}

    G90
    G0 Z5 F10000     ;ensure nozzle is above endstop pin
    G0 X{x1} Y{y1}  ;left position
    G0 Z{z1}        ;move down, ready for brushing
    
    M117 Brushing Nozzle
    G0 X{x2} F25000  ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 Z10 F3600     ;raise nozzle when done
    M117 Nozzle Cleaned

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    # Home if not Homed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
  
    # Z_TILT if not Z_TILT'd
    {% if printer.z_tilt.applied == False %}
        Z_TILT_ADJUST
        G28
    {% endif %}
    G0 X125 Y125 Z30 F3600
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro START_PRINT]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
  {% set target_init_tool = params.TOOL|int %}
  
  M140 S{BED_TEMP} ; set bed temp
  M109 S150
  M190 S{BED_TEMP} ; wait for bed temp
  G32                            ; home all axes
  G90                            ; absolute positioning
  M83

  BED_MESH_CALIBRATE ADAPTIVE=1
  SCRUB_NOZZLE ; clean nozzle
  CARTOGRAPHER_TOUCH

  M109 S{EXTRUDER_TEMP} ; set extruder temp
  T{target_init_tool}

  {% if BED_TEMP >= 65 %}
      SET_FAN_SPEED FAN=carbon_filter SPEED=1
  {% endif %}

# [gcode_macro START_PRINT]
# gcode:
#   {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
#   {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(195)|float %}
#   {% set S_EXTRUDER_TEMP = 150|float %}
#   {% set target_init_tool = params.TOOL|int %} ; <<<<<< Addition for BT
#   status_heating
#   M140 S{BED_TEMP} ; set bed temp
#   M104 S{EXTRUDER_TEMP} ; set first layer extruder temp
#   G90 ; use absolute coordinates
#   M83 ; extruder relative mode
#   PARK
#   M109 S{EXTRUDER_TEMP} ; wait for extruder temp
#   T{target_init_tool} ; <<<<<< Addition for BT
#   M104 S{S_EXTRUDER_TEMP} ; set standby extruder temp
#   M190 S{BED_TEMP} ; wait for bed temp
#   G28 Z
#   BED_MESH_PROFILE LOAD=default
#   PARK
#   M104 S{EXTRUDER_TEMP} ; set first layer extruder temp
#   status_heating
#   M109 S{EXTRUDER_TEMP} ; wait for extruder temp
#   BRUSH
#   status_printing
#   LINE_PURGE

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    
    SET_FAN_SPEED FAN=carbon_filter SPEED=0 ; shut down carbon filter (because its annoying!)

# @LH & @HonestBrothers - Tweaked based on Ellis' speed test macro: https://ellis3dp.com/Print-Tuning-Guide/articles/determining_max_speeds_accels.html
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
#
# Example: TEST_SPEED AXIS=XY SPEED=300 ACCEL=15000 SCV_=60 CRUISE_RATIO=0 HOME=0 ITERATIONS=1 
[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(1)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(40)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    # Select which axis to test
    {% set axis = params.AXIS|default("XY")|upper %}
    {% set home = params.HOME|default(0)|int %}
    {% set scvs = params.SCV_|default(printer.configfile.settings.printer.square_corner_velocity)|int %}
    {% set zpos = params.ZPOS|default(20)|int %}
    {% set cruise = params.CRUISE_RATIO|default(0.0)|float %}


    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d, scv, %s, on axis %s" % (iterations, speed, accel, scvs, axis)) }
    
    # Home and get position for comparison later:
    {% if home == 1 %}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{80*60}
        M400 
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-4} Y{printer.toolhead.axis_maximum.y-4} F{80*60}
        G4 P1000 
        GET_POSITION
    {% endif %}

    # Go to starting position
    G0 Y{y_min} Z{zpos} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={cruise} SQUARE_CORNER_VELOCITY={scvs}

    {% for i in range(iterations) %}
      {% if axis == "XY" %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}

            # Small fill
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            
      {% elif axis == "Y" %}
        # Large pattern
            # Diagonals
            G0 Y{y_min} F{speed*60}
            G0 Y{y_max} F{speed*60}
            G0 Y{y_min} F{speed*60}
            G0 Y{y_max} F{speed*60}
            G0 Y{y_min} F{speed*60}
            G0 Y{y_max} F{speed*60}
            
            # Box
            G0 Y{y_min} F{speed*60}
            G0 Y{y_max} F{speed*60}
            G0 Y{y_min} F{speed*60}
            G0 Y{y_max} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 Y{y_center_min} F{speed*60}
            G0 Y{y_center_max} F{speed*60}
            G0 Y{y_center_min} F{speed*60}
            G0 Y{y_center_max} F{speed*60}
            G0 Y{y_center_min} F{speed*60}
            G0 Y{y_center_max} F{speed*60}
            
            # Small box
            G0 Y{y_center_min} F{speed*60}
            G0 Y{y_center_max} F{speed*60}
            G0 Y{y_center_min} F{speed*60}
            G0 Y{y_center_max} F{speed*60}

            # Small fill
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            
      {% elif axis == "X" %}
        # Large pattern
            # Diagonals
            G0 X{x_min} F{speed*60}
            G0 X{x_max} F{speed*60}
            G0 X{x_min} F{speed*60}
            G0 X{x_max} F{speed*60}
            G0 X{x_min} F{speed*60}
            G0 X{x_max} F{speed*60}
            
            # Box
            G0 X{x_min} F{speed*60}
            G0 X{x_max} F{speed*60}
            G0 X{x_min} F{speed*60}
            G0 X{x_max} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} F{speed*60}
            G0 X{x_center_max} F{speed*60}
            G0 X{x_center_min} F{speed*60}
            G0 X{x_center_max} F{speed*60}
            G0 X{x_center_min} F{speed*60}
            G0 X{x_center_max} F{speed*60}
            
            # Small box
            G0 X{x_center_min} F{speed*60}
            G0 X{x_center_max} F{speed*60}
            G0 X{x_center_min} F{speed*60}
            G0 X{x_center_max} F{speed*60}

            # Small fill
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
      {% else %}
          { action_respond_info("Please input AXIS= X, Y, or XY. Default is XY.") }
      {% endif %}
    
    {% endfor %}


    # Restore max speed/accel/cruise to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}
    {% if home == 1 %}
    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-4} Y{printer.toolhead.axis_maximum.y-4} F{80*60}
        G4 P1000 
        GET_POSITION
    {% endif %}

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED